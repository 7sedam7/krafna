name: Release and Publish

on:
  push:
    tags:
      - 'v*'  # Trigger only when a tag starting with 'v' is pushed (e.g., v1.0.0)
  pull_request:
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0

permissions:
  contents: write

jobs:
  audit:
    name: Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        # Needed for audit-check@v2
      - name: generate Cargo.lock
        run: cargo generate-lockfile
      - uses: rustsec/audit-check@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build_and_test_linux:
    name: Build and Test (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/install-action@nextest
      - name: 'Build and test'
        run: cargo nextest run --workspace --all-targets --all-features

  build_and_test_windows:
    name: Build and Test (Windows)
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - name: Prepare symlink configuration
        run: git config --global core.symlinks true

      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/install-action@nextest
      - name: 'Build and test'
        run: cargo nextest run --workspace --all-targets --all-features

  github_release:
    name: ${{ matrix.target }}
    needs:
      - audit
      - build_and_test_linux
      - build_and_test_windows
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            deb: true
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabihf
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            deb: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            deb: true
          - os: ubuntu-latest
            target: i686-unknown-linux-musl
            deb: true
          - os: ubuntu-latest
            target: aarch64-linux-android
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: Cargo.toml
          field: package.version

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Setup cache
        uses: Swatinem/rust-cache@v2.7.7
        with:
          key: ${{ matrix.target }}

      - name: Install cross
        if: ${{ runner.os == 'Linux' }}
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --color=always --git=https://github.com/cross-rs/cross.git --locked --rev=02bf930e0cb0c6f1beffece0788f3932ecb2c7eb --verbose cross

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target=${{ matrix.target }} --color=always --verbose
          use-cross: ${{ runner.os == 'Linux' }}

      - name: Install cargo-deb
        if: ${{ matrix.deb == true }}
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-deb

      - name: Build deb
        if: ${{ matrix.deb == true }}
        uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --no-build --no-strip --output=. --target=${{ matrix.target }}

      - name: Package (*nix)
        if: runner.os != 'Windows'
        run: |
          tar -cv CHANGELOG.md README.md \
            -C target/${{ matrix.target }}/release/ krafna |
            gzip --best > \
            krafna-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.tar.gz

      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: |
          7z a krafna-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.zip `
            CHANGELOG.md README.md `
            ./target/${{ matrix.target }}/release/krafna.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            *.deb
            *.tar.gz
            *.zip

      - name: Create GitHub release
        # if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, '[release]')
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          files: |
            *.deb
            *.tar.gz
            *.zip
          name: Release v${{ steps.get_version.outputs.value }}
          tag_name: "v${{ steps.get_version.outputs.value }}"

  crates_io_publish:
      name: Publish (crates.io)
      needs: github_release

      runs-on: ubuntu-latest
      timeout-minutes: 10
      steps:
        - uses: actions/checkout@v4
        - uses: dtolnay/rust-toolchain@stable

        - name: cargo-release Cache
          id: cargo_release_cache
          uses: actions/cache@v4
          with:
            path: ~/.cargo/bin/cargo-release
            key: ${{ runner.os }}-cargo-release

        - run: cargo install cargo-release
          if: steps.cargo_release_cache.outputs.cache-hit != 'true'

        - name: cargo login
          run: cargo login ${{ secrets.CRATES_IO_API_TOKEN }}

        - name: "cargo release publish"
          run: |-
            cargo release \
              publish \
              --workspace \
              --all-features \
              --allow-branch HEAD \
              --no-confirm \
              --execute
